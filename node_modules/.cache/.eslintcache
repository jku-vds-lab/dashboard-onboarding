[{"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/index.js":"1","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/App.jsx":"2","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/dashboard/index.jsx":"3","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/index.jsx":"4","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/path.jsx":"5","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/nodeTypes/boxNode.jsx":"6","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/nodeTypes/simpleNode.jsx":"7"},{"size":267,"mtime":1677104825888,"results":"8","hashOfConfig":"9"},{"size":195,"mtime":1677104825796,"results":"10","hashOfConfig":"9"},{"size":5880,"mtime":1677107540652,"results":"11","hashOfConfig":"9"},{"size":8757,"mtime":1677107000638,"results":"12","hashOfConfig":"9"},{"size":1267,"mtime":1677104825884,"results":"13","hashOfConfig":"9"},{"size":1648,"mtime":1677104825872,"results":"14","hashOfConfig":"9"},{"size":313,"mtime":1677107009798,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"10oiqwi",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"19"},"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/index.js",[],[],[],"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/App.jsx",[],[],"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/dashboard/index.jsx",[],[],"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/index.jsx",["40","41","42","43","44","45","46","47","48","49","50","51"],[],"import {useState, useRef, useCallback} from \"react\";\n\nimport ReactFlow, {\n    useNodesState, useEdgesState, Controls, updateEdge, addEdge, ReactFlowProvider,\n} from \"reactflow\";\n\nimport \"reactflow/dist/style.css\";\nimport \"../../assets/css/flow.scss\";\n\n// Node types\nimport BoxNode from \"./nodeTypes/boxNode\";\nimport SimpleNode from \"./nodeTypes/simpleNode\";\n//Custom edge\nimport Path from \"./path\";\n\nimport Sidebar from '../dashboard/index';\n\nconst initialNodes = [\n    {\n        id: \"node-1\",\n        type: \"simple\",\n        position: {x: 0, y: 70},\n        data: {title: \"Dashboard\", type: \"dashboard\"},\n    },\n    {\n        id: \"node-2\",\n        type: \"simple\",\n        targetPosition: \"top\",\n        position: {x: 120, y: 70},\n        data: {title: \"Line Chart\", type: \"line-chart\"},\n    },\n    {\n        id: 'node-3',\n        data: { label: 'OR' },\n        position: { x: 240, y: 0 },\n        className: 'node-group',\n    },\n    {\n        id: \"node-4\",\n        type: \"simple\",\n        targetPosition: \"top\",\n        position: {x: 30, y: 40},\n        data: {title: \"Bar chart\", type: \"bar-chart\"},\n        parentNode: 'node-3',\n    },\n    {\n        id: \"node-5\",\n        type: \"simple\",\n        targetPosition: \"top\",\n        position: {x: 140, y: 40},\n        data: {title: \"Bar chart\", type: \"bar-chart\"},\n        parentNode: 'node-3',\n    },\n    {\n        id: \"node-6\",\n        type: \"simple\",\n        targetPosition: \"top\",\n        position: {x: 30, y: 110},\n        data: {title: \"Dashboard\", type: \"dashboard\"},\n        parentNode: 'node-3',\n    },\n    {\n        id: \"node-7\",\n        type: \"simple\",\n        targetPosition: \"top\",\n        position: {x: 140, y: 110},\n        data: {title: \"Line chart\", type: \"line-chart\"},\n        parentNode: 'node-3',\n    },\n\n];\n/** Create edges between nodes if needed*/\nconst initialEdges = [\n    /*{\n        id: \"edge-1\",\n        source: \"node-1\",\n        target: \"node-2\",\n        sourceHandle: \"output-4\",\n        animated: true,\n    },\n    {\n        id: \"edge-3\",\n        source: \"node-1\",\n        target: \"node-3\",\n        sourceHandle: \"output-1\",\n        targetHandle: \"input-1\",\n        type: 'path',\n        data: { n_source: \"1\", n_target: \"3\", h_output: \"1\", h_input: \"1\", color: \"#f1ed00\", class: \"story-1\"},\n        deletable: true,\n    },\n    {\n        id: \"edge-4\",\n        source: \"node-1\",\n        target: \"node-4\",\n        sourceHandle: \"output-2\",\n        targetHandle: \"input-1\",\n        deletable: true,\n        label: \"storyline 2\",\n        labelStyle: {fill: \"white\"},\n        labelBgStyle: {fill: \"#2b2b2b\"},\n    },*/\n];\n\n\n// we define the nodeTypes outside of the component to prevent re-renderings\n// you could also use useMemo inside the component\nconst nodeTypes = {boxNode: BoxNode, simple: SimpleNode};\nconst edgeTypes = {\n    path: Path,\n};\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nfunction NodesCanvas() {\n    const reactFlowWrapper = useRef(null);\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\n    /**\n     * Called after end of edge gets dragged to another source or target\n     * @type {function(*=, *=): void}\n     */\n    const onEdgeUpdate = useCallback(\n        (oldEdge, newConnection) => {\n\n            //TODO: create a method to return nodeTarget, inputHandle, sourcetarget, outputHandle\n\n            //reset the color\n            let nodeTarget = document.querySelector('[data-id=\"'+oldEdge.target+'\"]');\n            let inputHandle = nodeTarget.querySelector('[data-handleid=\"'+oldEdge.targetHandle+'\"]');\n            inputHandle.classList.add(\"empty\");\n            //if the new connection is not empty\n            nodeTarget = document.querySelector('[data-id=\"'+newConnection.target+'\"]');\n            inputHandle = nodeTarget.querySelector('[data-handleid=\"'+newConnection.targetHandle+'\"]');\n\n            if(inputHandle.classList.contains(\"empty\")){\n                //connect\n            }\n\n            //get path color\n            let nodeSource = document.querySelector('[data-id=\"'+newConnection.source+'\"]');\n            let outputHandle = nodeSource.querySelector('[data-handleid=\"'+newConnection.sourceHandle+'\"]');\n            inputHandle.classList.remove(\"empty\");\n            inputHandle.style.background=outputHandle.style.background;\n\n\n            setEdges((els) => updateEdge(oldEdge, newConnection, els))},\n        []\n    );\n  /**\n     * Called when user starts to drag connection line.\n     * We need to assign a color that correspond to the input color, when available.\n     * On the very first node the color is assigned randomly.\n     * @type {(function(*=): void)|*}\n     */\n    const onConnectStart = useCallback(\n        (params) => {\n            //get an available color from the node\n            params.target.style.background = \"#1ab41e\";\n\n        },\n        [],\n    );\n\n    const onConnectEnd = useCallback(\n        (params) => {\n            //params.target.style.background = \"#1ab41e\"\n\n        },\n        [],\n    );\n\n\n    /**\n     *Called when user connects two nodes\n     * @type {function(*=): void}\n     */\n    const onConnect = useCallback((params) => {\n\n        const nodeSource = document.querySelector('[data-id=\"'+params.source+'\"]');\n        const nodeTarget = document.querySelector('[data-id=\"'+params.target+'\"]');\n        let outputHandle = nodeSource.querySelector('[data-handleid=\"'+params.sourceHandle+'\"]');\n        let inputHandle = nodeTarget.querySelector('[data-handleid=\"'+params.targetHandle+'\"]');\n        inputHandle.style.background = outputHandle.style.background;\n        setEdges((els) => addEdge(params, els))\n        //finding the path to assign the color\n        //data-testid=\"rf__edge-reactflow__edge-node-1output-3-node-4input-3\n        //var path = document.querySelector('[data-testid=\"rf__edge-reactflow__edge-'+params.source+params.sourceHandle+params.target+params.targetHandle+'\"]');\n\n    }, []);\n\n    const onClick = useCallback((event) => {\n\n    }, []);\n\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    }, []);\n\n    const onDrop = useCallback(\n        (event) => {\n            event.preventDefault();\n\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n            const type = event.dataTransfer.getData('application/reactflow');\n\n            // check if the dropped element is valid\n            if (typeof type === 'undefined' || !type) {\n                return;\n            }\n\n          const position = reactFlowInstance.project({\n                x: event.clientX - reactFlowBounds.left,\n                y: event.clientY - reactFlowBounds.top,\n            });\n            const newNode = {\n                id: getId(),\n                type,\n                position,\n                data: {title: \"Dashboard\", type: \"dashboard\"},\n            };\n\n            setNodes((nds) => nds.concat(newNode));\n        },\n        [reactFlowInstance]\n    );\n\n\n\n    /**\n     * Called, when the node is clicked – do something\n     * @type {(function(): void)|*}\n     */\n    const onNodeClick = useCallback(\n        (event) => {\n            console.log(event);\n            let annotation = document.getElementById('annotation-box');\n            (event.target.classList.contains('react-flow__pane'))?annotation.classList.remove('show'):annotation.classList.add('show');\n        },\n        [],\n    );\n\n\n    /**\n     * Called when nodes get deleted. The handles are updated. The narrative trajectory is broken.\n     May be we need to highlight the nodes to indicate the broken linkage\n     * @type {(function(): void)|*}\n     */\n    const onNodesDelete = useCallback(\n        () => {\n\n        },\n        [],\n    );\n    /**\n     * Called when user clicks an edge. The storyline can be rendered in the presentation editor\n     * @type {(function())|*}\n     */\n    const onEdgeClick = useCallback(\n        () => {\n\n        },\n        [],\n    );\n\n\n    return (\n        <div className=\"dndflow\">\n        <ReactFlowProvider>\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n        <ReactFlow\n            nodes={nodes}\n            edges={edges}\n            onNodesChange={onNodesChange}\n            nodeTypes={nodeTypes}\n            onInit={setReactFlowInstance}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            onNodeClick={onNodeClick}\n            onClick={onClick}\n            snapToGrid\n            fitView\n        >\n            <Controls />\n        </ReactFlow>\n        </div>\n        </ReactFlowProvider>\n        </div>\n    );\n}\n\nexport default NodesCanvas;\n","/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/path.jsx",[],[],"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/nodeTypes/boxNode.jsx",[],[],"/Users/Ivaletta/.bitnami/stackman/machines/xampp/volumes/root/htdocs/dashboard-onboarding-ui/src/components/nodesCanvas/nodeTypes/simpleNode.jsx",["52"],[],"import {Position} from \"reactflow\";\n\nconst SimpleNode = ({data}) => {\n    return (\n        <div className={`simple-node ${data.type}`}>\n            <div className={`header`}>\n                <p className=\"title\">{data?.title ?? \"Title\"}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default SimpleNode;\n",{"ruleId":"53","severity":1,"message":"54","line":16,"column":8,"nodeType":"55","messageId":"56","endLine":16,"endColumn":15},{"ruleId":"53","severity":1,"message":"57","line":108,"column":7,"nodeType":"55","messageId":"56","endLine":108,"endColumn":16},{"ruleId":"53","severity":1,"message":"58","line":117,"column":29,"nodeType":"55","messageId":"56","endLine":117,"endColumn":42},{"ruleId":"53","severity":1,"message":"59","line":123,"column":11,"nodeType":"55","messageId":"56","endLine":123,"endColumn":23},{"ruleId":"60","severity":1,"message":"61","line":148,"column":9,"nodeType":"62","endLine":148,"endColumn":11,"suggestions":"63"},{"ruleId":"53","severity":1,"message":"64","line":156,"column":11,"nodeType":"55","messageId":"56","endLine":156,"endColumn":25},{"ruleId":"53","severity":1,"message":"65","line":165,"column":11,"nodeType":"55","messageId":"56","endLine":165,"endColumn":23},{"ruleId":"53","severity":1,"message":"66","line":178,"column":11,"nodeType":"55","messageId":"56","endLine":178,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":190,"column":8,"nodeType":"62","endLine":190,"endColumn":10,"suggestions":"67"},{"ruleId":"60","severity":1,"message":"68","line":227,"column":9,"nodeType":"62","endLine":227,"endColumn":28,"suggestions":"69"},{"ruleId":"53","severity":1,"message":"70","line":251,"column":11,"nodeType":"55","messageId":"56","endLine":251,"endColumn":24},{"ruleId":"53","severity":1,"message":"71","line":261,"column":11,"nodeType":"55","messageId":"56","endLine":261,"endColumn":22},{"ruleId":"53","severity":1,"message":"72","line":1,"column":9,"nodeType":"55","messageId":"56","endLine":1,"endColumn":17},"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'edgeTypes' is assigned a value but never used.","'onEdgesChange' is assigned a value but never used.","'onEdgeUpdate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setEdges'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'onConnectStart' is assigned a value but never used.","'onConnectEnd' is assigned a value but never used.","'onConnect' is assigned a value but never used.",["74"],"React Hook useCallback has a missing dependency: 'setNodes'. Either include it or remove the dependency array.",["75"],"'onNodesDelete' is assigned a value but never used.","'onEdgeClick' is assigned a value but never used.","'Position' is defined but never used.",{"desc":"76","fix":"77"},{"desc":"76","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [setEdges]",{"range":"81","text":"82"},{"range":"83","text":"82"},"Update the dependencies array to be: [reactFlowInstance, setNodes]",{"range":"84","text":"85"},[4507,4509],"[setEdges]",[6038,6040],[7089,7108],"[reactFlowInstance, setNodes]"]